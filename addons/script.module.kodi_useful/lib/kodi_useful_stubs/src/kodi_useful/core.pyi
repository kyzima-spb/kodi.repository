import typing as t
from _typeshed import Incomplete

__all__ = ['QueryParams', 'Router']

class Addon:
    addon: Incomplete
    id: Incomplete
    url: Incomplete
    handle: Incomplete
    debug: Incomplete
    logger: Incomplete
    def __init__(self, debug: bool = False) -> None: ...

class QueryParams:
    def __init__(self, query_string: str) -> None: ...
    def __iter__(self): ...
    def get(self, name: str, default: t.Any | list[t.Any] | None = None, type_cast: t.Callable[[str], t.Any] = ...) -> t.Any | list[t.Any] | None: ...
    def get_bool(self, name: str, default: bool | list[bool] | None = None) -> bool | list[bool] | None: ...
    def get_int(self, name: str, default: int | list[int] | None = None) -> int | list[int] | None: ...
    def get_string(self, name: str, default: str | list[str] | None = None) -> str | list[str] | None: ...
    def set(self, name: str, value: t.Any) -> None: ...

class Router:
    plugin_url: Incomplete
    index_route: Incomplete
    route_param_name: Incomplete
    def __init__(self, plugin_url: str = '', index_route: str = '', route_param_name: str = 'action') -> None:
        """
        Arguments:
            plugin_url str the plugin url in plugin:// notation.
        """
    @staticmethod
    def current_query() -> QueryParams: ...
    @staticmethod
    def current_url() -> str: ...
    def dispatch(self, qs: str | None = None): ...
    def register_error_handler(self, exc_type: type[Exception]): ...
    def route(self, name: str = ''): ...
    def register_route(self, name: str, handler: t.Callable[..., None]) -> None: ...
    def url_for(self, func_or_name: str | t.Callable[..., None], **kwargs) -> str:
        '''
        Returns a URL for calling the plugin recursively from the given set of keyword arguments.

        Arguments:
            action str
            kwargs dict "argument=value" pairs
        '''
    def url_from_current(self, **kwargs: t.Any) -> str: ...
